// This file has been autogenerated from a class added in the UI designer.

using System;
using AgileBits;
using Foundation;
using UIKit;

namespace DemoOnePasswordExtension
{
	public partial class ChangePasswordViewController : UIViewController
	{
		public ChangePasswordViewController(IntPtr handle) : base(handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();
			this.onePasswordButton.Hidden = !OnePasswordExtension.SharedExtension.IsAppExtensionAvailable;
		}

		partial void changePasswordInOnePassword(Foundation.NSObject sender)
		{
			string changedPassword = this.freshPasswordTextField.Text ?? "";
			string oldPassword = this.oldPasswordTextField.Text ?? "";
			string confirmationPassword = this.confirmPasswordTextField.Text ?? "";

			// Validate that the new password and the old password are not the same.
			if (oldPassword.Length > 0 && oldPassword.Equals(changedPassword))
			{
				this.ShowChangePasswordFailedAlertWithMessage("The old and the new password must not be the same");
				return;
			}

			// Validate that the new and confirmation passwords match.
			if (!changedPassword.Equals(confirmationPassword))
			{
				this.ShowChangePasswordFailedAlertWithMessage("The new passwords and the confirmation password must match");
				return;
			}

			NSDictionary loginDetails = new NSDictionary(
				AppExtensionLoginDictionarykeys.TitleKey, "ACME", // Optional, used for the third schenario only
				AppExtensionLoginDictionarykeys.UsernameKey, "aUsername", // Optional, used for the third schenario only
				AppExtensionLoginDictionarykeys.PasswordKey, changedPassword,
				AppExtensionLoginDictionarykeys.OldPasswordKey, oldPassword,
				AppExtensionLoginDictionarykeys.NotesKey, "Saved with the ACME app"// Optional, used for the third schenario only
			);

			// The password generation options are optional, but are very handy in case you have strict rules about password lengths, symbols and digits.
			NSDictionary passwordGenerationOptions = new NSDictionary(
				// The minimum password length can be 4 or more.
				AppExtensionPasswordGeneratorOptions.MinLengthKey, 8,

				// The maximum password length can be 50 or less.
				AppExtensionPasswordGeneratorOptions.MaxLengthKey, 30,

				// If YES, the 1Password will guarantee that the generated password will contain at least one digit (number between 0 and 9). Passing NO will not exclude digits from the generated password.
				AppExtensionPasswordGeneratorOptions.RequireDigitsKey, true,

				// If YES, the 1Password will guarantee that the generated password will contain at least one symbol (See the list bellow). Passing NO with will exclude symbols from the generated password.
				AppExtensionPasswordGeneratorOptions.RequireSymbolsKey, true,

				// Here are all the symbols available in the the 1Password Password Generator:
				// !#$%^&*()_-+=|[]{}'\";.,>?/~`
				// The string for AppExtensionPasswordGeneratorOptions.ForbiddenCharactersKey should contain the symbols and characters that you wish 1Password to exclude from the generated password.
				AppExtensionPasswordGeneratorOptions.ForbiddenCharactersKey, "!#$%/0lIO"
			);

			OnePasswordExtension.SharedExtension.ChangePasswordForLoginForURLString("https://www.acme.com", loginDetails, passwordGenerationOptions, this, sender, (NSDictionary loginDictionary, NSError error) =>
			{
				if (loginDictionary == null || loginDictionary.Count == 0)
				{
					if (error.Code != AppExtensionErrorCodes.CancelledByUser)
					{
						System.Diagnostics.Debug.WriteLine("Error invoking 1Password App Extension for find login, {0}", error);
					}
					return;
				}

				this.oldPasswordTextField.Text = (NSString)loginDictionary[AppExtensionLoginDictionarykeys.OldPasswordKey];
				this.freshPasswordTextField.Text = (NSString)loginDictionary[AppExtensionLoginDictionarykeys.PasswordKey];
				this.confirmPasswordTextField.Text = (NSString)loginDictionary[AppExtensionLoginDictionarykeys.PasswordKey];
			});
		}

		void ShowChangePasswordFailedAlertWithMessage(string message)
		{
			UIAlertController alertController = UIAlertController.Create("Change Password Error", message, UIAlertControllerStyle.Alert);
			alertController.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Cancel, (alertAction) =>
			{
				this.freshPasswordTextField.Text = "";
				this.confirmPasswordTextField.Text = "";
				this.freshPasswordTextField.BecomeFirstResponder();
			}));

			PresentViewController(alertController, true, null);
		}
	}
}
